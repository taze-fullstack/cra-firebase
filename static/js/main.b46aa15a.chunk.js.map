{"version":3,"sources":["firebase.js","components/queue.js","components/youtube.js","components/404.js","components/App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Queue","useState","user","setUser","videoQuery","setVideoQuery","videoResults","setVideoResults","q","setQ","useEffect","auth","onAuthStateChanged","console","log","database","ref","on","snap","items","val","newState","item","push","id","dj","video","videoResultsCallback","error","result","alert","className","undefined","displayName","split","email","onClick","signOut","then","catch","provider","GoogleAuthProvider","setCustomParameters","login_hint","signInWithPopup","onSubmit","e","preventDefault","query","cb","data","key","part","type","maxResults","videoCategoryId","axios","get","params","response","err","searchYoutube","name","placeholder","value","onChange","currentTarget","length","map","vid","snippet","title","channelTitle","thumbnails","videoId","src","medium","url","alt","qRef","handleAddToQueue","remove","NoRouteMatch","App","basename","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oQAUAA,IAASC,cATM,CACbC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,8CAGMR,QAAf,EC8MeS,G,MAlND,WAAO,IAAD,EACMC,qBADN,mBACXC,EADW,KACLC,EADK,OAEkBF,mBAAS,IAF3B,mBAEXG,EAFW,KAECC,EAFD,OAGsBJ,qBAHtB,mBAGXK,EAHW,KAGGC,EAHH,OAIAN,qBAJA,mBAIXO,EAJW,KAIRC,EAJQ,KAMlBC,qBACE,WACEnB,EAASoB,OAAOC,oBAAmB,SAACV,GAC9BA,GACFW,QAAQC,IAAIZ,GACZC,EAAQD,GAEKX,EAASwB,WAAWC,IAAI,KAChCC,GAAG,SAAS,SAACC,GAChB,IAAIC,EAAQD,EAAKE,MACbC,EAAW,GACf,IAAK,IAAIC,KAAQH,EACfE,EAASE,KAAK,CACZC,GAAIF,EACJG,GAAIN,EAAMG,GAAMG,GAChBC,MAAOP,EAAMG,GAAMI,QAGvBjB,EAAKY,OAGPlB,EAAQ,SAId,IAKF,IAAMwB,EAAuB,SAACC,EAAOC,GAC/BD,GACFE,MAAM,+BACNjB,QAAQC,IAAIc,KAEZf,QAAQC,IAAIe,GACZtB,EAAgBsB,KAkFpB,OACE,yBAAKE,UAAU,SACb,yBAAKA,UAAU,eACb,qCACYC,IAAT9B,EACCA,EACE,6BACE,qCAAWA,EAAK+B,YAAYC,MAAM,KAAK,GAAvC,OACA,2BAAIhC,EAAKiC,OACT,4BAAQC,QAzCA,WACpB7C,EACGoB,OACA0B,UACAC,MAAK,WAEJnC,EAAQ,IACRM,OAED8B,OAAM,SAASX,GACdE,MAAM,4BACNjB,QAAQC,IAAIc,QA8BJ,aAGF,4BAAQQ,QA3EC,WACnB,IAAMI,EAAW,IAAIjD,EAASoB,KAAK8B,mBAEnCD,EAASE,oBAAoB,CAC3BC,WAAY,sBAGdpD,EACGoB,OACAiC,gBAAgBJ,GAChBF,MAAK,SAAST,OASdU,OAAM,SAASX,SAwDR,WAGF,2CAGMI,IAAT9B,GAAsBA,GACrB,6BACE,0BAAM2C,SAzFe,SAACC,GAC9BA,EAAEC,iBC1DgB,SAACC,EAAOC,GAC5B,IAAMC,EAAO,CACXC,IAJgB,0CAKhB3C,EAAGwC,EACHI,KAAM,UACNC,KAAM,QACNC,WAAY,KACZC,gBAAiB,MAGnBC,IACGC,IAdc,+CAcE,CAACC,OAAQR,IACzBZ,MAAK,SAACqB,GACLV,EAAG,KAAMU,EAAST,KAAK/B,UAExBoB,OAAM,SAACqB,GACNX,EAAGW,EAAK,SD4CVC,CAAczD,EAAYuB,KAuFhB,2BACEmC,KAAK,QACLC,YAAY,SACZC,MAAO5D,EACP6D,SAlGW,SAACnB,GACxBzC,EAAcyC,EAAEoB,cAAcF,UAmGpB,4BAAQX,KAAK,UAAb,WAEF,kCACoBrB,IAAjB1B,EACCA,EAAa6D,OAAS,EACpB,yBAAKpC,UAAU,iBACZzB,EAAa8D,KAAI,SAACC,GAAS,IACnBC,EAAeD,EAAfC,QAAS9C,EAAM6C,EAAN7C,GACT+C,EAAmCD,EAAnCC,MAAOC,EAA4BF,EAA5BE,aAAcC,EAAcH,EAAdG,WAE5B,OACE,yBAAKtB,IAAK3B,EAAGkD,QAAS3C,UAAU,SAC9B,yBAAK4C,IAAKF,EAAWG,OAAOC,IAAKC,IAAI,KACrC,2BAAIP,GACJ,2BAAIC,GACJ,4BAAQpC,QAAS,kBA3DhB,SAACiC,GACxB,IAAMU,EAAOxF,EAASwB,WAAWC,IAAI,KAE/BM,EAAO,CACXG,GAAI,CACFqC,KAAM5D,EAAK+B,YACXE,MAAOjC,EAAKiC,OAEdT,MAAO,CACLgD,QAASL,EAAI7C,GAAGkD,QAChBH,MAAOF,EAAIC,QAAQC,QAIvBQ,EAAKxD,KAAKD,GA6CmC0D,CAAiBX,KAAxC,KAGA,+CAMR,2CAGF,wDAMV,yBAAKtC,UAAU,aACb,iCACSC,IAANxB,EACCA,EAAE4D,KAAI,SAAC9C,GACL,OACE,wBAAI6B,IAAK7B,EAAKE,IACZ,8BAAOF,EAAKI,MAAM6C,OAClB,4BACEnC,QAAS,WAlJR,IAACZ,IAmJWF,EAAKE,GAlJlBjC,EAASwB,WAAWC,IAApB,aAA8BQ,IACtCyD,WA+IM,cAWN,gDE3MGC,EAJM,WACnB,OAAO,gDCiBMC,EAdH,WACV,OACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,yBAAKrD,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOsD,KAAK,IAAIC,OAAK,EAACC,UAAWvF,IACjC,kBAAC,IAAD,CAAOuF,UAAWL,MAJxB,MCIgBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEd9D,OAAM,SAAAX,GACLf,QAAQe,MAAMA,EAAM0E,c","file":"static/js/main.b46aa15a.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nconst config = {\r\n  apiKey: 'AIzaSyBEpYr78zlaZkLFkUKRAj_mO_ReYJlY_ng',\r\n  authDomain: 'halfstack-d1196.firebaseapp.com',\r\n  databaseURL: 'https://halfstack-d1196.firebaseio.com',\r\n  projectId: 'halfstack-d1196',\r\n  storageBucket: 'halfstack-d1196.appspot.com',\r\n  messagingSenderId: '573767894623',\r\n  appId: '1:573767894623:web:1136689bb4e637d8efbdea',\r\n};\r\nfirebase.initializeApp(config);\r\nexport default firebase;\r\n","import React, {useState, useEffect} from 'react';\r\n\r\nimport {searchYoutube} from './youtube';\r\n\r\nimport firebase from '../firebase';\r\nimport '../style.scss';\r\n\r\nconst Queue = () => {\r\n  const [user, setUser] = useState();\r\n  const [videoQuery, setVideoQuery] = useState('');\r\n  const [videoResults, setVideoResults] = useState();\r\n  const [q, setQ] = useState();\r\n\r\n  useEffect(\r\n    () => {\r\n      firebase.auth().onAuthStateChanged((user) => {\r\n        if (user) {\r\n          console.log(user);\r\n          setUser(user);\r\n\r\n          const qRef = firebase.database().ref('q');\r\n          qRef.on('value', (snap) => {\r\n            let items = snap.val();\r\n            let newState = [];\r\n            for (let item in items) {\r\n              newState.push({\r\n                id: item,\r\n                dj: items[item].dj,\r\n                video: items[item].video,\r\n              });\r\n            }\r\n            setQ(newState);\r\n          });\r\n        } else {\r\n          setUser('');\r\n        }\r\n      });\r\n    },\r\n    [\r\n      /* Trigger once */\r\n    ]\r\n  );\r\n\r\n  const videoResultsCallback = (error, result) => {\r\n    if (error) {\r\n      alert('Error: please check console');\r\n      console.log(error);\r\n    } else {\r\n      console.log(result);\r\n      setVideoResults(result);\r\n    }\r\n  };\r\n\r\n  const removeItem = (id) => {\r\n    const itemRef = firebase.database().ref(`/q/${id}`);\r\n    itemRef.remove();\r\n  };\r\n\r\n  const handleVideoQuery = (e) => {\r\n    setVideoQuery(e.currentTarget.value);\r\n  };\r\n\r\n  const handleVideoQuerySubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    searchYoutube(videoQuery, videoResultsCallback);\r\n  };\r\n\r\n  const handleSignIn = () => {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n    provider.setCustomParameters({\r\n      login_hint: 'user@fullstack.ph',\r\n    });\r\n\r\n    firebase\r\n      .auth()\r\n      .signInWithPopup(provider)\r\n      .then(function(result) {\r\n        // // This gives you a Google Access Token. You can use it to access the Google API.\r\n        // var token = result.credential.accessToken;\r\n        // // The signed-in user info.\r\n        // console.log(result);\r\n        // var user = result.user;\r\n        // // console.log(user);\r\n        // // ...\r\n      })\r\n      .catch(function(error) {\r\n        // // Handle Errors here.\r\n        // var errorCode = error.code;\r\n        // var errorMessage = error.message;\r\n        // // The email of the user's account used.\r\n        // var email = error.email;\r\n        // // The firebase.auth.AuthCredential type that was used.\r\n        // var credential = error.credential;\r\n        // // ...\r\n      });\r\n  };\r\n\r\n  const handleSignOut = () => {\r\n    firebase\r\n      .auth()\r\n      .signOut()\r\n      .then(function() {\r\n        // Sign-out successful.\r\n        setUser('');\r\n        setQ();\r\n      })\r\n      .catch(function(error) {\r\n        alert('error, check console log');\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  const handleAddToQueue = (vid) => {\r\n    const qRef = firebase.database().ref('q');\r\n\r\n    const item = {\r\n      dj: {\r\n        name: user.displayName,\r\n        email: user.email,\r\n      },\r\n      video: {\r\n        videoId: vid.id.videoId,\r\n        title: vid.snippet.title,\r\n      },\r\n    };\r\n\r\n    qRef.push(item);\r\n  };\r\n\r\n  return (\r\n    <div className=\"index\">\r\n      <div className=\"pane-search\">\r\n        <header>\r\n          {user !== undefined ? (\r\n            user ? (\r\n              <div>\r\n                <p>Hello, {user.displayName.split(' ')[0]} :D</p>\r\n                <p>{user.email}</p>\r\n                <button onClick={handleSignOut}>Sign Out</button>\r\n              </div>\r\n            ) : (\r\n              <button onClick={handleSignIn}>Sign In</button>\r\n            )\r\n          ) : (\r\n            <></>\r\n          )}\r\n        </header>\r\n        {user !== undefined && user && (\r\n          <div>\r\n            <form onSubmit={handleVideoQuerySubmit}>\r\n              <input\r\n                name=\"query\"\r\n                placeholder=\"search\"\r\n                value={videoQuery}\r\n                onChange={handleVideoQuery}\r\n              />\r\n              <button type=\"submit\">Search</button>\r\n            </form>\r\n            <div>\r\n              {videoResults !== undefined ? (\r\n                videoResults.length > 0 ? (\r\n                  <div className=\"video-results\">\r\n                    {videoResults.map((vid) => {\r\n                      const {snippet, id} = vid;\r\n                      const {title, channelTitle, thumbnails} = snippet;\r\n\r\n                      return (\r\n                        <div key={id.videoId} className=\"video\">\r\n                          <img src={thumbnails.medium.url} alt=\"\" />\r\n                          <p>{title}</p>\r\n                          <p>{channelTitle}</p>\r\n                          <button onClick={() => handleAddToQueue(vid)}>\r\n                            q\r\n                          </button>\r\n                          <button>q next</button>\r\n                        </div>\r\n                      );\r\n                    })}\r\n                  </div>\r\n                ) : (\r\n                  <div>No results</div>\r\n                )\r\n              ) : (\r\n                <div>Search for videos...</div>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"pane-list\">\r\n        <ul>\r\n          {q !== undefined ? (\r\n            q.map((item) => {\r\n              return (\r\n                <li key={item.id}>\r\n                  <span>{item.video.title}</span>\r\n                  <button\r\n                    onClick={() => {\r\n                      removeItem(item.id);\r\n                    }}\r\n                  >\r\n                    Remove\r\n                  </button>\r\n                </li>\r\n              );\r\n            })\r\n          ) : (\r\n            <li>Fetching...</li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Queue;\r\n","import axios from 'axios';\r\n\r\nconst SEARCH_URL = 'https://www.googleapis.com/youtube/v3/search';\r\nconst YOUTUBE_KEY = 'AIzaSyAlw5mGkush_MCe_0EvYroPUW9y5O5W_sk';\r\n\r\nconst searchYoutube = (query, cb) => {\r\n  const data = {\r\n    key: YOUTUBE_KEY,\r\n    q: query,\r\n    part: 'snippet',\r\n    type: 'video',\r\n    maxResults: '18',\r\n    videoCategoryId: '10',\r\n  };\r\n\r\n  axios\r\n    .get(SEARCH_URL, {params: data})\r\n    .then((response) => {\r\n      cb(null, response.data.items);\r\n    })\r\n    .catch((err) => {\r\n      cb(err, null);\r\n    });\r\n};\r\n\r\nexport {searchYoutube};\r\n","import React from 'react';\r\n\r\nconst NoRouteMatch = () => {\r\n  return <div>Page not found</div>;\r\n};\r\n\r\nexport default NoRouteMatch;\r\n","import React from 'react';\nimport {HashRouter, Route, Switch} from 'react-router-dom';\n\nimport Queue from './queue';\nimport NoRouteMatch from './404';\n\nconst App = () => {\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"app\">\n        <Switch>\n          <Route path=\"/\" exact component={Queue} />\n          <Route component={NoRouteMatch} />\n        </Switch>\n      </div>\n      ;\n    </HashRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}